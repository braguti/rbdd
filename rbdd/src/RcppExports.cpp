// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// init_bdd
void init_bdd(std::string library, int node_num, int cache_size, std::string bdd_name);
RcppExport SEXP _rbdd_init_bdd(SEXP librarySEXP, SEXP node_numSEXP, SEXP cache_sizeSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type library(librarySEXP);
    Rcpp::traits::input_parameter< int >::type node_num(node_numSEXP);
    Rcpp::traits::input_parameter< int >::type cache_size(cache_sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    init_bdd(library, node_num, cache_size, bdd_name);
    return R_NilValue;
END_RCPP
}
// new_variable
int new_variable(std::string variable_name, std::string var_type, std::string bdd_name);
RcppExport SEXP _rbdd_new_variable(SEXP variable_nameSEXP, SEXP var_typeSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type variable_name(variable_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type var_type(var_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(new_variable(variable_name, var_type, bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// new_variable_from_expression
int new_variable_from_expression(std::string expression, std::string bdd_name);
RcppExport SEXP _rbdd_new_variable_from_expression(SEXP expressionSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(new_variable_from_expression(expression, bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// print_variables
void print_variables(std::string bdd_name);
RcppExport SEXP _rbdd_print_variables(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    print_variables(bdd_name);
    return R_NilValue;
END_RCPP
}
// expression_to_string
void expression_to_string(int expression, std::string bdd_name);
RcppExport SEXP _rbdd_expression_to_string(SEXP expressionSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    expression_to_string(expression, bdd_name);
    return R_NilValue;
END_RCPP
}
// apply_bdd
void apply_bdd(int expression, std::string bdd_name);
RcppExport SEXP _rbdd_apply_bdd(SEXP expressionSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    apply_bdd(expression, bdd_name);
    return R_NilValue;
END_RCPP
}
// get_node_num
int get_node_num(std::string bdd_name);
RcppExport SEXP _rbdd_get_node_num(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(get_node_num(bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// save_bdd
void save_bdd(std::string file_name, std::string bdd_name);
RcppExport SEXP _rbdd_save_bdd(SEXP file_nameSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    save_bdd(file_name, bdd_name);
    return R_NilValue;
END_RCPP
}
// read_bdd
void read_bdd(std::string file_name, std::string bdd_name);
RcppExport SEXP _rbdd_read_bdd(SEXP file_nameSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    read_bdd(file_name, bdd_name);
    return R_NilValue;
END_RCPP
}
// done_bdd
void done_bdd(std::string bdd_name);
RcppExport SEXP _rbdd_done_bdd(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    done_bdd(bdd_name);
    return R_NilValue;
END_RCPP
}
// is_initialized
bool is_initialized(std::string bdd_name);
RcppExport SEXP _rbdd_is_initialized(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(is_initialized(bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// reset_bdd
void reset_bdd(std::string bdd_name);
RcppExport SEXP _rbdd_reset_bdd(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    reset_bdd(bdd_name);
    return R_NilValue;
END_RCPP
}
// set_cache_ratio
void set_cache_ratio(double cache_ratio, std::string bdd_name);
RcppExport SEXP _rbdd_set_cache_ratio(SEXP cache_ratioSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cache_ratio(cache_ratioSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    set_cache_ratio(cache_ratio, bdd_name);
    return R_NilValue;
END_RCPP
}
// set_max_node_num
void set_max_node_num(int size, std::string bdd_name);
RcppExport SEXP _rbdd_set_max_node_num(SEXP sizeSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    set_max_node_num(size, bdd_name);
    return R_NilValue;
END_RCPP
}
// reorder_bdd
void reorder_bdd(std::string reorder_method, std::string bdd_name);
RcppExport SEXP _rbdd_reorder_bdd(SEXP reorder_methodSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type reorder_method(reorder_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    reorder_bdd(reorder_method, bdd_name);
    return R_NilValue;
END_RCPP
}
// add_cnf_var
int add_cnf_var(std::string name, std::string bdd_name);
RcppExport SEXP _rbdd_add_cnf_var(SEXP nameSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(add_cnf_var(name, bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// get_bdd_library
void get_bdd_library(std::string bdd_name);
RcppExport SEXP _rbdd_get_bdd_library(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    get_bdd_library(bdd_name);
    return R_NilValue;
END_RCPP
}
// same_bdd
bool same_bdd(std::string name_bdd_1, std::string name_bdd_2);
RcppExport SEXP _rbdd_same_bdd(SEXP name_bdd_1SEXP, SEXP name_bdd_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name_bdd_1(name_bdd_1SEXP);
    Rcpp::traits::input_parameter< std::string >::type name_bdd_2(name_bdd_2SEXP);
    rcpp_result_gen = Rcpp::wrap(same_bdd(name_bdd_1, name_bdd_2));
    return rcpp_result_gen;
END_RCPP
}
// print_bdd
void print_bdd(std::string bdd_name);
RcppExport SEXP _rbdd_print_bdd(SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    print_bdd(bdd_name);
    return R_NilValue;
END_RCPP
}
// restrict_bdd
int restrict_bdd(int expression, std::string var_to_restrict, std::string variable_name, bool positive_form, std::string bdd_name);
RcppExport SEXP _rbdd_restrict_bdd(SEXP expressionSEXP, SEXP var_to_restrictSEXP, SEXP variable_nameSEXP, SEXP positive_formSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< std::string >::type var_to_restrict(var_to_restrictSEXP);
    Rcpp::traits::input_parameter< std::string >::type variable_name(variable_nameSEXP);
    Rcpp::traits::input_parameter< bool >::type positive_form(positive_formSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(restrict_bdd(expression, var_to_restrict, variable_name, positive_form, bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// traverse_scalar
Rcpp::NumericVector traverse_scalar(Rcpp::Function function_to_apply, int initial_scalar, std::string bdd_name);
RcppExport SEXP _rbdd_traverse_scalar(SEXP function_to_applySEXP, SEXP initial_scalarSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type function_to_apply(function_to_applySEXP);
    Rcpp::traits::input_parameter< int >::type initial_scalar(initial_scalarSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(traverse_scalar(function_to_apply, initial_scalar, bdd_name));
    return rcpp_result_gen;
END_RCPP
}
// traverse_vector
Rcpp::NumericVector traverse_vector(Rcpp::Function function_to_apply, Rcpp::NumericVector initial_vector, std::string bdd_name);
RcppExport SEXP _rbdd_traverse_vector(SEXP function_to_applySEXP, SEXP initial_vectorSEXP, SEXP bdd_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type function_to_apply(function_to_applySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type initial_vector(initial_vectorSEXP);
    Rcpp::traits::input_parameter< std::string >::type bdd_name(bdd_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(traverse_vector(function_to_apply, initial_vector, bdd_name));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rbdd_init_bdd", (DL_FUNC) &_rbdd_init_bdd, 4},
    {"_rbdd_new_variable", (DL_FUNC) &_rbdd_new_variable, 3},
    {"_rbdd_new_variable_from_expression", (DL_FUNC) &_rbdd_new_variable_from_expression, 2},
    {"_rbdd_print_variables", (DL_FUNC) &_rbdd_print_variables, 1},
    {"_rbdd_expression_to_string", (DL_FUNC) &_rbdd_expression_to_string, 2},
    {"_rbdd_apply_bdd", (DL_FUNC) &_rbdd_apply_bdd, 2},
    {"_rbdd_get_node_num", (DL_FUNC) &_rbdd_get_node_num, 1},
    {"_rbdd_save_bdd", (DL_FUNC) &_rbdd_save_bdd, 2},
    {"_rbdd_read_bdd", (DL_FUNC) &_rbdd_read_bdd, 2},
    {"_rbdd_done_bdd", (DL_FUNC) &_rbdd_done_bdd, 1},
    {"_rbdd_is_initialized", (DL_FUNC) &_rbdd_is_initialized, 1},
    {"_rbdd_reset_bdd", (DL_FUNC) &_rbdd_reset_bdd, 1},
    {"_rbdd_set_cache_ratio", (DL_FUNC) &_rbdd_set_cache_ratio, 2},
    {"_rbdd_set_max_node_num", (DL_FUNC) &_rbdd_set_max_node_num, 2},
    {"_rbdd_reorder_bdd", (DL_FUNC) &_rbdd_reorder_bdd, 2},
    {"_rbdd_add_cnf_var", (DL_FUNC) &_rbdd_add_cnf_var, 2},
    {"_rbdd_get_bdd_library", (DL_FUNC) &_rbdd_get_bdd_library, 1},
    {"_rbdd_same_bdd", (DL_FUNC) &_rbdd_same_bdd, 2},
    {"_rbdd_print_bdd", (DL_FUNC) &_rbdd_print_bdd, 1},
    {"_rbdd_restrict_bdd", (DL_FUNC) &_rbdd_restrict_bdd, 5},
    {"_rbdd_traverse_scalar", (DL_FUNC) &_rbdd_traverse_scalar, 3},
    {"_rbdd_traverse_vector", (DL_FUNC) &_rbdd_traverse_vector, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rbdd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
