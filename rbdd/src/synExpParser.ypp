%{ /*** C/C++ Declarations ***/

#include <stdio.h>
#include <string>
#include <vector>
#include <list>
#include <set>


%}
/*** yacc/bison Declarations ***/

/* Require bison 3.0 or later */
%require "3.0"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start explist

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%define api.namespace {kconf}

/* set the parser's class identifier */
%define parser_class_name {synExpParser}

%define api.token.constructor
%define api.value.type variant

//%define parse.assert

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
//%parse-param { class Driver& driver }
// The parsing context.
%param { class synExpDriver& driver }
%parse-param {std::map<int, synExp*> synExpMap}
/* verbose error messages */
%error-verbose

%code requires {
    #include "varInfo.hpp"
    #include "synExp.hpp"
    
    struct kconf_id;
    bool is_digits(const std::string &str);
}

%token <kconf_id*>T_MAINMENU
%token <kconf_id*>T_MENU


%token <std::string> T_LITERAL
%token <std::string> T_SYMBOL

%token T_TRUE
%token T_FALSE
%token T_MODULE
%token T_IF
%token T_THEN
%token T_ELSE
%token T_UNEQUAL
%token T_CLOSEPAREN
%token T_OPENPAREN
%token T_EOL
%token T_EOF 0


%right    T_IMPLIES
%left     T_OR
%left     T_AND
%left     T_NOR
%left     T_NAND
%left     T_XOR
%left     T_XNOR
%left     T_IF_AND_ONLY_IF
%nonassoc T_NOT
%left     T_EQUAL T_UNEQUAL

%type<synExp*> exp;

%printer { yyoutput << $$; } <std::string>;


%{

#include "synExpDriver.hpp"
#include "synExpScanner.hpp"
#include "varInfo.hpp"


/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex

%}

%% /*** Grammar Rules ***/


explist : explist exp T_EOL {
	if (driver.getCorrectParsing()) {
	    driver.addExp($2);
	}
};

explist : exp T_EOL {
	if (driver.getCorrectParsing()) {
    	driver.addExp($1);
	}
};

exp : exp T_AND exp {
    if (driver.getCorrectParsing()) {
		$$ = makeAnd($1, $3);
	}
};

exp : exp T_OR exp {
	if (driver.getCorrectParsing()) {
    	$$ = makeOr($1, $3);
	}
};

exp : exp T_NAND exp {
	if (driver.getCorrectParsing()) {
    	$$ = makeNot(makeAnd($1, $3));
	}
};

exp : exp T_NOR exp {
	if (driver.getCorrectParsing()) {
    	$$ = makeNot(makeOr($1, $3));
	}
};

exp : exp T_XOR exp {
	if (driver.getCorrectParsing()) {
    	$$ = makeOr(makeAnd($1, makeNot($3)), makeAnd(makeNot($1), $3));
	}
};

exp : exp T_XNOR exp {
	if (driver.getCorrectParsing()) {
    	$$ = makeNot(makeOr(makeAnd($1, makeNot($3)), makeAnd(makeNot($1), $3)));
	}
};

exp : exp T_IF_AND_ONLY_IF exp {
	if (driver.getCorrectParsing()) {
    	$$ = makeNot(makeOr(makeAnd($1, makeNot($3)), makeAnd(makeNot($1), $3)));
	}
};

exp : T_NOT exp {
	if (driver.getCorrectParsing()) {
		$$ = makeNot($2);
	}
};

exp : T_IF exp T_THEN exp T_ELSE exp {
	if (driver.getCorrectParsing()) {
	    $$ = makeIfThenElse($2, $4, $6);
	}
};

exp : T_IF exp T_THEN exp {
    if (driver.getCorrectParsing()) {
		$$ = makeIfThenElse($2, $4, synTrue);
	}
};

exp : T_OPENPAREN exp T_CLOSEPAREN {
    if (driver.getCorrectParsing()) {
		$$ = $2;
	}
};

exp : exp T_IMPLIES exp {
	if (driver.getCorrectParsing()) {
	    $$ = makeImplies($1, $3);
	}
};

exp : exp T_EQUAL exp {
	if (driver.getCorrectParsing()) {
	    $$ = makeEqual($1, $3);
	}
};

exp : T_TRUE {
    $$ = synTrue;
};

exp : T_FALSE {
   	$$ = synFalse;
};

exp : T_MODULE {
    $$ = synModule;
};

exp : T_LITERAL {
    $$ = new synString($1);
};

exp : T_SYMBOL {
	std::map<int, synExp*>::iterator it = synExpMap.begin();
	bool found = false;

	while (it != synExpMap.end() && !found) {
		found = $1.compare(it->second->getSymbol()) == 0;
		++it;
	}

	if (found) {
    	$$ = new synSymbol($1);
	} else {
		std::cerr << "Symbol \"" << $1 << "\" has not been defined\n" << std::endl;
		driver.setCorrectParsing(false);
	}
};

%% /*** Additional Code ***/
bool is_digits(const std::string &str)
{
    return str.find_first_not_of("0123456789") == std::string::npos;
}
void kconf::synExpParser::error(const synExpParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

